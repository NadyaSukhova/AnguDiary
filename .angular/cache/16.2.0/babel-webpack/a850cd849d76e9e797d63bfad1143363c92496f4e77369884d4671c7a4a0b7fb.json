{"ast":null,"code":"// This file was modified by Oracle on July 5, 2021.\n// Errors generated by asynchronous authentication plugins are now being\n// handled and subsequently emitted at the command level.\n// Modifications copyright (c) 2021, Oracle and/or its affiliates.\n\n'use strict';\n\nconst Packets = require('../packets/index.js');\nconst sha256_password = require('../auth_plugins/sha256_password');\nconst caching_sha2_password = require('../auth_plugins/caching_sha2_password.js');\nconst mysql_native_password = require('../auth_plugins/mysql_native_password.js');\nconst mysql_clear_password = require('../auth_plugins/mysql_clear_password.js');\nconst standardAuthPlugins = {\n  sha256_password: sha256_password({}),\n  caching_sha2_password: caching_sha2_password({}),\n  mysql_native_password: mysql_native_password({}),\n  mysql_clear_password: mysql_clear_password({})\n};\nfunction warnLegacyAuthSwitch() {\n  console.warn('WARNING! authSwitchHandler api is deprecated, please use new authPlugins api');\n}\nfunction authSwitchPluginError(error, command) {\n  // Authentication errors are fatal\n  error.code = 'AUTH_SWITCH_PLUGIN_ERROR';\n  error.fatal = true;\n  command.emit('error', error);\n}\nfunction authSwitchRequest(packet, connection, command) {\n  const {\n    pluginName,\n    pluginData\n  } = Packets.AuthSwitchRequest.fromPacket(packet);\n  let authPlugin = connection.config.authPlugins && connection.config.authPlugins[pluginName];\n\n  // legacy plugin api don't allow to override mysql_native_password\n  // if pluginName is mysql_native_password it's using standard auth4.1 auth\n  if (connection.config.authSwitchHandler && pluginName !== 'mysql_native_password') {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginName,\n      pluginData\n    }, (err, data) => {\n      if (err) {\n        return authSwitchPluginError(err, command);\n      }\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n  if (!authPlugin) {\n    authPlugin = standardAuthPlugins[pluginName];\n  }\n  if (!authPlugin) {\n    throw new Error(`Server requests authentication using unknown plugin ${pluginName}. See ${'TODO: add plugins doco here'} on how to configure or author authentication plugins.`);\n  }\n  connection._authPlugin = authPlugin({\n    connection,\n    command\n  });\n  Promise.resolve(connection._authPlugin(pluginData)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  }).catch(err => {\n    authSwitchPluginError(err, command);\n  });\n}\nfunction authSwitchRequestMoreData(packet, connection, command) {\n  const {\n    data\n  } = Packets.AuthSwitchRequestMoreData.fromPacket(packet);\n  if (connection.config.authSwitchHandler) {\n    const legacySwitchHandler = connection.config.authSwitchHandler;\n    warnLegacyAuthSwitch();\n    legacySwitchHandler({\n      pluginData: data\n    }, (err, data) => {\n      if (err) {\n        return authSwitchPluginError(err, command);\n      }\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    });\n    return;\n  }\n  if (!connection._authPlugin) {\n    throw new Error('AuthPluginMoreData received but no auth plugin instance found');\n  }\n  Promise.resolve(connection._authPlugin(data)).then(data => {\n    if (data) {\n      connection.writePacket(new Packets.AuthSwitchResponse(data).toPacket());\n    }\n  }).catch(err => {\n    authSwitchPluginError(err, command);\n  });\n}\nmodule.exports = {\n  authSwitchRequest,\n  authSwitchRequestMoreData\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}