{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache').default;\nconst parserCache = new LRU({\n  max: 15000\n});\nfunction keyFromFields(type, fields, options, config) {\n  let res = `${type}` + `/${typeof options.nestTables}` + `/${options.nestTables}` + `/${options.rowsAsArray}` + `/${options.supportBigNumbers || config.supportBigNumbers}` + `/${options.bigNumberStrings || config.bigNumberStrings}` + `/${typeof options.typeCast}` + `/${options.timezone || config.timezone}` + `/${options.decimalNumbers}` + `/${options.dateStrings}`;\n  for (let i = 0; i < fields.length; ++i) {\n    const field = fields[i];\n    res += `/${field.name}:${field.columnType}:${field.length}:${field.schema}:${field.table}:${field.flags}:${field.characterSet}`;\n  }\n  return res;\n}\nfunction getParser(type, fields, options, config, compiler) {\n  const key = keyFromFields(type, fields, options, config);\n  let parser = parserCache.get(key);\n  if (parser) {\n    return parser;\n  }\n  parser = compiler(fields, options, config);\n  parserCache.set(key, parser);\n  return parser;\n}\nfunction setMaxCache(max) {\n  parserCache.max = max;\n}\nfunction clearCache() {\n  parserCache.clear();\n}\nmodule.exports = {\n  getParser: getParser,\n  setMaxCache: setMaxCache,\n  clearCache: clearCache\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}