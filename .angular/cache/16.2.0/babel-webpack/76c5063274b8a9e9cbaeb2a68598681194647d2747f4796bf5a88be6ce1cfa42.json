{"ast":null,"code":"var bind = Function.prototype.bind,\n  slice = Array.prototype.slice,\n  toString = Object.prototype.toString;\nexports.bind = function (func, that) {\n  var args = slice.call(arguments, 2);\n  if (bind) {\n    args.unshift(that);\n    return bind.apply(func, args);\n  }\n  return function () {\n    return func.apply(that, args.concat(slice.call(arguments)));\n  };\n};\nexports.slice = function (object, begin, end) {\n  return slice.call(object, begin, end);\n};\nexports.toString = function (object) {\n  return toString.call(object);\n};\nexports.isNull = nativeTypeChecker('Null');\nexports.isDate = nativeTypeChecker('Date');\nexports.isMath = nativeTypeChecker('Math');\nexports.isJSON = nativeTypeChecker('JSON');\nexports.isError = nativeTypeChecker('Error');\nexports.isArray = Array.isArray || nativeTypeChecker('Array');\nexports.isObject = nativeTypeChecker('Object');\nexports.isRegExp = nativeTypeChecker('RegExp');\nexports.isNumber = nativeTypeChecker('Number');\nexports.isString = nativeTypeChecker('String');\nexports.isBoolean = nativeTypeChecker('Boolean');\nexports.isFunction = nativeTypeChecker('Function');\nexports.isArguments = nativeTypeChecker('Arguments');\nexports.isUndefined = nativeTypeChecker('Undefined');\nfunction nativeTypeChecker(type) {\n  type = '[object ' + type + ']';\n  return function (object) {\n    return toString.call(object) === type;\n  };\n}\nexports.isValid = function (object) {\n  return !exports.isInvalid(object);\n};\nexports.isInvalid = function (object) {\n  return exports.isNull(object) || exports.isUndefined(object);\n};\nexports.isImmutable = function (object) {\n  return !exports.isMutable(object);\n};\nexports.isMutable = function (object) {\n  return object && !exports.isNumber(object) && !exports.isString(object) && !exports.isBoolean(object);\n};\nexports.isEnumerable = function (object) {\n  if (!object) return false;\n  if (exports.isNumber(object)) return exports.isInteger(object);\n  if (exports.isInteger(object.length)) return object.length >= 0;\n  return exports.isEnumerableObject(object);\n};\nexports.isEnumerableObject = function (object) {\n  for (var _ in object) return true;\n  return false;\n};\nexports.isEmpty = function (object) {\n  return exports.isObject(object) ? !exports.isEnumerableObject(object) : !exports.isEnumerable(object);\n};\nexports.isFiniteNumber = function (number) {\n  return exports.isNumber(number) && isFinite(number);\n};\nexports.isInteger = function (number) {\n  return exports.isFiniteNumber(number) && Math.floor(number) === number;\n};\nexports.isVague = function (object) {\n  return object && typeof object === 'object';\n};\nexports.isList = function (list) {\n  return exports.isVague(list) && exports.isInteger(list.length) && list.length >= 0;\n};\nexports.isNaN = isNaN;\nexports.nativeTypeOf = function (object) {\n  var nativeType = object.toString(object);\n  return nativeType.substring(8, nativeType.length - 1);\n};\nexports.typeOf = function (object) {\n  return exports.isObject(object) ? object.constructor.name || 'Object' : exports.nativeTypeOf(object);\n};\nexports.safeApply = function (func, args, that) {\n  return exports.isFunction(func) ? func.apply(that || this, args) : undefined;\n};\nexports.enumerate = function (object, iterator, that, _ignoreForEach) {\n  if (!object) return object;\n  that = that || this;\n  if (!_ignoreForEach && exports.isFunction(object.forEach)) return object.forEach(iterator, that);\n  var key = 0,\n    end = object.length;\n  if (exports.isString(object)) {\n    for (; key < end; key += 1) iterator.call(that, object.charAt(key), key, object);\n  }\n  if (exports.isList(object)) {\n    for (; key < end; key += 1) iterator.call(that, object[key], key, object);\n  } else if (exports.isInteger(object)) {\n    if (object < 0) {\n      end = 0;\n      key = object;\n    } else end = object;\n    for (; key < end; key += 1) iterator.call(that, key, Math.abs(key), object);\n  } else exports.enumerateObject(object, iterator, that);\n  return object;\n};\nexports.enumerateObject = function (object, iterator, that) {\n  var key;\n  for (key in object) iterator.call(that, object[key], key, object);\n  return object;\n};\nexports.assignAll = function (target, giver, filter, that, _method) {\n  if (!exports.isMutable(target)) return target;\n  _method = _method === 'enumerate' ? _method : 'enumerateObject';\n  exports[_method](giver, function (value, key) {\n    if (!exports.safeApply(filter, arguments, that || target)) {\n      target[key] = value;\n    }\n  });\n  return target;\n};\nexports.assignList = function (target, giver, filter, that) {\n  return exports.assignAll(target, giver, filter, that, 'enumerate');\n};\nexports.assign = function (target, giver, filter, that) {\n  return exports.assignAll(target, giver, function (_, key) {\n    if (!giver.hasOwnProperty(key)) return true;\n    return exports.safeApply(filter, arguments, that || this);\n  }, that);\n};\nexports.toArray = function (object, begin, end) {\n  if (exports.isArray()) return exports.isInteger(begin) ? exports.slice(object, begin, end) : object;\n  if (exports.isArguments(object) || exports.isString(object)) return exports.slice(object, begin, end);\n  if (!exports.isList(object)) return undefined;\n  if (!exports.isInteger(end)) end = object.length;\n  begin = begin || 0;\n  return exports.assignList([], object, function (_, i) {\n    return begin > i || i >= end;\n  });\n};","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}